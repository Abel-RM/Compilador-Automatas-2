/* Generated By:JavaCC: Do not edit this line. comp.java */
package Comp;
import java.io.*;
class comp implements compConstants {
        static String exp="";
        static String nombre;
        static String tipo;
        static String atributo;
        static String valor;
        static String posicion;
        static Simbolo s = new Simbolo();
        public static void main( String[] args )throws ParseException, Exception
        {
                try{
                        Ventana ven = new Ventana("Compilador");
                }catch(Exception e){
                        Ventana.t2.setText(e.getMessage());
                }


        }

  static final public void Programa() throws ParseException {
    modifi();
    jj_consume_token(clase);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(Izq);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      field_declaration();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case If:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      if_statement();
    }
    jj_consume_token(Der);
  }

  static final public void modifi() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void field_declaration() throws ParseException {
    variable_declaration();
  }

  static final public void variable_declaration() throws ParseException {
    modifi();
          atributo=token.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Boolean:
      jj_consume_token(Boolean);
          tipo=token.image;
      identi();
          nombre=token.image;
        s=Ventana.buscar(nombre);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
          valor="undefined";
        break;
      case Asignacion:
        jj_consume_token(Asignacion);
        jj_consume_token(Bool);
          valor=token.image;
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case integer:
      jj_consume_token(integer);
          tipo=token.image;
      identi();
          nombre=token.image;
        s=Ventana.buscar(nombre);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
          valor="undefined";
        break;
      case Asignacion:
        jj_consume_token(Asignacion);
        jj_consume_token(Int);
          valor=token.image;
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case Dou:
      jj_consume_token(Dou);
          tipo=token.image;
      identi();
          nombre=token.image;
        s=Ventana.buscar(nombre);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
          valor="undefined";
        break;
      case Asignacion:
        jj_consume_token(Asignacion);
        jj_consume_token(Double);
          valor=token.image;
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case St:
      jj_consume_token(St);
          tipo=token.image;
      identi();
          nombre=token.image;
        s=Ventana.buscar(nombre);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
          valor="undefined";
        break;
      case Asignacion:
        jj_consume_token(Asignacion);
        jj_consume_token(String);
          valor=token.image;
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case Ch:
      jj_consume_token(Ch);
          tipo=token.image;
      identi();
          nombre=token.image;
        s=Ventana.buscar(nombre);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
          valor="undefined";
        break;
      case Asignacion:
        jj_consume_token(Asignacion);
        jj_consume_token(Char);
          valor=token.image;
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        String g=s.getPosicion();
        Simbolo n  = new Simbolo(nombre,tipo,atributo,valor,g);
        String pos=Ventana.buscarDuplicados(nombre);
        if(Ventana.repetido){
                Ventana.repetido=false;
                Ventana.dup = "\u005cn\u005cn\u005cn\u005cnerror: variable "+nombre +" is already defined at "+pos+",\u005cn"+"the first declaration was at "+g;
        }
                Ventana.tabla.put(nombre,n);
  }

  static final public void type() throws ParseException {
    type_specifier();
  }

  static final public void expression() throws ParseException {
    testing_expression();
  }

  static final public void testing_expression() throws ParseException {
    or();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Mayor:
      jj_consume_token(Mayor);
      break;
    case Menor:
      jj_consume_token(Menor);
      break;
    case MenorIgual:
      jj_consume_token(MenorIgual);
      break;
    case MayorIgual:
      jj_consume_token(MayorIgual);
      break;
    case Comparacion:
      jj_consume_token(Comparacion);
      break;
    case Diferente:
      jj_consume_token(Diferente);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    or();
  }

  static final public void or() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
      jj_consume_token(Int);
      break;
    case IDENTIFIER:
      identi();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void type_specifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Boolean:
      jj_consume_token(Boolean);
      break;
    case integer:
      jj_consume_token(integer);
      break;
    case Dou:
      jj_consume_token(Dou);
      break;
    case St:
      jj_consume_token(St);
      break;
    case Ch:
      jj_consume_token(Ch);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void if_statement() throws ParseException {
    jj_consume_token(If);
    jj_consume_token(ParAP);
    expression();
    jj_consume_token(ParCi);
    statement();
  }

  static final public void statement() throws ParseException {
    statement_block();
  }

  static final public void statement_block() throws ParseException {
    jj_consume_token(Izq);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      aritmetica_expression();
    }
    jj_consume_token(Der);
  }

  static final public void par() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ParAP:
      jj_consume_token(ParAP);
      break;
    case ParCi:
      jj_consume_token(ParCi);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void aritmetica_expression() throws ParseException {
    identi();
                  Ventana.ex=token.image;
                        if(!Ventana.tabla.containsKey(token.image)){
                                Simbolo k = new Simbolo();
                                k=Ventana.buscarNoDec(token.image);
                                Ventana.noDeclarada +="error: variable  "+token.image+" at "+k.getPosicion()+" was not declarated\u005cn";
                        }
    jj_consume_token(Asignacion);
    label_4:
    while (true) {
      if (jj_2_1(2)) {
        opint();
      } else if (jj_2_2(2)) {
        op();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ParAP:
        case ParCi:
          par();
                                                             exp=exp+token.image;
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Mas:
      case Menos:
      case Mul:
      case Div:
      case ParAP:
      case ParCi:
      case Int:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void identi() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  static final public void opint() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
      jj_consume_token(Int);
                        exp=exp+token.image;
      break;
    case IDENTIFIER:
      identi();
                        exp=exp+token.image;
                        if(!Ventana.tabla.containsKey(token.image)){
                                Simbolo k = new Simbolo();
                                k=Ventana.buscarNoDecNum(token.image);
                                Ventana.noDeclarada +="error: variable  "+token.image+" at "+k.getPosicion()+" was not declarated\u005cn";
                        }
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Mas:
        jj_consume_token(Mas);
                        exp=exp+token.image;
        break;
      case Menos:
        jj_consume_token(Menos);
                                                        exp=exp+token.image;
        break;
      case Mul:
        jj_consume_token(Mul);
                                                                                      exp=exp+token.image;
        break;
      case Div:
        jj_consume_token(Div);
                                                                                                                    exp=exp+token.image;
        break;
      case ParAP:
      case ParCi:
        par();
                                                                                                                                                  exp=exp+token.image;
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Mas:
      case Menos:
      case Mul:
      case Div:
      case ParAP:
      case ParCi:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
      jj_consume_token(Int);
                        exp=exp+token.image;
      break;
    case IDENTIFIER:
      identi();
                        exp=exp+token.image;
                        if(!Ventana.tabla.containsKey(token.image)){
                                Simbolo k = new Simbolo();
                                k=Ventana.buscarNoDecNumD(token.image);
                                Ventana.noDeclarada +="error: variable  "+token.image+" at "+k.getPosicion()+" was not declarated\u005cn";
                        }
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void op() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Mas:
        jj_consume_token(Mas);
                        exp=exp+token.image;
        break;
      case Menos:
        jj_consume_token(Menos);
                                                        exp=exp+token.image;
        break;
      case Mul:
        jj_consume_token(Mul);
                                                                                      exp=exp+token.image;
        break;
      case Div:
        jj_consume_token(Div);
                                                                                                                    exp=exp+token.image;
        break;
      case ParAP:
      case ParCi:
        par();
                                                                                                                                                  exp=exp+token.image;
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Mas:
      case Menos:
      case Mul:
      case Div:
      case ParAP:
      case ParCi:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
      jj_consume_token(Int);
                        exp=exp+token.image;
      break;
    case IDENTIFIER:
      identi();
                        exp=exp+token.image;
                        if(!Ventana.tabla.containsKey(token.image)){
                                Simbolo k = new Simbolo();
                                k=Ventana.buscarNoDecNumD(token.image);
                                Ventana.noDeclarada +="error: variable  "+token.image+" at "+k.getPosicion()+" was not declarated\u005cn";
                        }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void asignation() throws ParseException {
    identi();
          Ventana.ex=token.image;
    jj_consume_token(Asignacion);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
      jj_consume_token(Int);
      break;
    case Bool:
      jj_consume_token(Bool);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(Int)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    if (jj_3R_11()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(Mul)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(Menos)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(Int)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(Mas)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    if (jj_3R_12()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_12()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(Div)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(Mul)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(Menos)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(Mas)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(Div)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa0000,0x2000000,0xa0000,0x10080,0x10080,0x10080,0x10080,0x10080,0x5e00000,0x7e,0x28000000,0x5e00000,0x20000000,0x3000,0x3000,0x28003f00,0x28000000,0x3f00,0x3f00,0x28000000,0x3f00,0x3f00,0x28000000,0x8100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public comp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public comp(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public comp(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public comp(compTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(compTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
